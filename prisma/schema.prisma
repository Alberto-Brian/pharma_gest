// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Pharma_gest {
  id              String      @id @default(uuid())
  name            String
  email           String      @unique
  phone           String?
  address         String?
  status          Boolean     @default(true)
  avatar          String?
  logo            String?
  url_pharmacy    String?
  info            String?
  // pharmacy        Pharmacy[]
  admin           Admin[]
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
}

model Admin {
  id              String      @id @default(uuid())
  email           String      @unique
  username        String
  password        String
  gender          String?
  phone           String?
  address         String?
  status          Boolean     @default(true)
  avatar          String?
  birthdate       DateTime?   @db.Date
  nationality     Nationality[]
  social_network  Social_networks[]
  permission      Permission[]
  pharma_gest     Pharma_gest @relation(fields: [id_pharma_gest], references:[id])
  id_pharma_gest  String  	  @unique
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  deleted_at      DateTime? 
  deleted_by      String      @default("")

}

model Pharmacy{
  id              String      @id @default(uuid())
  name            String
  email           String      @unique
  doc             String
  banking_account String
  phone           String?
  address         String?
  status          Boolean     @default(false)
  avatar          String?
  logo            String?
  url_pharmacy    String?
  info            String?
  user            User[]
  employee        Employee[]
  product         Product[]
  business_man    Business_man[]
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  deleted_at      DateTime?
  deleted_by      String      @default("")
} 

model Business_man {
  id              String      @id @default(uuid())
  email           String      @unique
  username        String
  password        String
  gender          String?
  phone           String?
  address         String?
  avatar          String?
  birthdate       DateTime?   @db.Date
  status          Boolean     @default(true)
  pharmacy        Pharmacy[]
  nationality     Nationality[]
  social_network  Social_networks[]
  permission      Permission[]
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  deleted_at      DateTime? 
  deleted_by      String      @default("")
}

model User {
  id              String      @id @default(uuid())
  email           String      @unique
  username        String
  password        String
  gender          String?
  phone           String?
  address         String?
  avatar          String?
  birthdate       DateTime?   @db.Date
  status          Boolean     @default(true)
  nationality     Nationality[]
  pharmacy        Pharmacy[]
  social_network  Social_networks[]
  permission      Permission[]
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  deleted_at      DateTime? 
  deleted_by      String      @default("")
}

model Employee {
  id              String      @id @default(uuid())
  email           String      @unique
  username        String
  password        String
  gender          String?
  phone           String?
  address         String?
  avatar          String?
  birthdate       DateTime?   @db.Date
  status          Boolean     @default(true)
  nationality     Nationality[]
  pharmacy        Pharmacy[]
  social_network  Social_networks[]
  permission      Permission[]
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  deleted_at      DateTime? 
  deleted_by      String      @default("")
}

model Permission {
  id              String      @id @default(uuid())
  name            String
  description     String 
  admin           Admin[]
  employee        Employee[]
  business_man    Business_man[]
  user            User[]
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  deleted_at      DateTime? 
  deleted_by      String      @default("")
}

model Product{
  id              String      @id @default(uuid())
  name            String
  description     String?
  price           Float       @default(0)
  old_price       Float? 
  status          Boolean     @default(true)
  image           String
  pharmacy        Pharmacy    @relation(fields: [id_pharmacy], references: [id])
  category        Category    @relation(fields: [id_category], references: [id])
  id_pharmacy     String     
  id_category     String
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  deleted_at      DateTime? 
  deleted_by      String      @default("")
}

model Nationality {
  id              String      @id @default(uuid())
  name            String      @unique
  description     String?
  user            User[]
  admin           Admin[]
  employee        Employee[]
  business_man    Business_man[]
}

model Social_networks {
  id              String       @id   @default(uuid())
  name            String       @unique
  description     String?
  user            User[] 
  admin           Admin[]
  employee        Employee[]
  business_man    Business_man[]
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  deleted_at      DateTime? 
  deleted_by      String      @default("")
}

model Category {
  id              String      @id @default(uuid())
  name            String      @unique
  description     String?
  product         Product[]
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  deleted_at      DateTime? 
  deleted_by      String      @default("")
}